<?php

/**
 * @file
 * Entry point for the Lambeth Open Data module.
 *
 * @ingroup
 */
module_load_include('inc', 'lambeth_opendata');

/**
 * Implements hook_menu().
 */
function lambeth_opendata_menu() {
  $items['admin/config/search/lambeth_opendata'] = array(
    'title' => 'Lambeth Open Data',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lambeth_opendata_admin_settings'),
    'description' => 'Configure Lambeth Open Data',
    'access arguments' => array('administer site configuration'),
    'file' => 'lambeth_opendata.admin.inc',
  );
  $items['admin/config/search/lambeth_opendata/settings'] = array(
    'title' => 'Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );
  $items['admin/config/search/lambeth_opendata/properties'] = array(
    'title' => 'Entities',
    'type' => MENU_LOCAL_TASK,
    'description' => 'View Lambeth Open Data entity definitions, properties as well as links to pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lambeth_opendata_entities'),
    'access arguments' => array('administer site configuration'),
    'file' => 'lambeth_opendata.admin.inc',
    'weight' => 200,
  );
  $items['admin/config/search/lambeth_opendata/scraper'] = array(
    'title' => 'Scraper',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Scrape the Lambeth Open Data pages',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lambeth_opendata_scraper'),
    'access arguments' => array('administer site configuration'),
    'file' => 'lambeth_opendata.admin.inc',
    'weight' => 240,
  );
  $items['admin/config/search/lambeth_opendata/junk'] = array(
    'title' => 'Junk',
    'type' => MENU_LOCAL_TASK,
    'description' => 'Junk code goes here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('lambeth_opendata_junk'),
    'access arguments' => array('administer site configuration'),
    'file' => 'lambeth_opendata.admin.inc',
    'weight' => 400,
  );
  $items['lambeth_opendata/autocomplete/%/%'] = array(
    'title' => 'Lambeth Open Data Autocomplete',
    'page callback' => 'lambeth_opendata_autocomplete',
    'page arguments' => array(2, 3),
    'type' => MENU_CALLBACK,
    'access arguments' => array('access content'),
  );
//  $items['lambeth_opendata/debug/%/%'] = array(
//    'title' => 'Lambeth Open Data Item Debug Page',
//    'type' => MENU_NORMAL_ITEM,
//    'page type' => MENU_CALLBACK,
//    'description' => 'View raw Lambeth Open Data item data',
//    'page callback' => 'lambeth_opendata_debug',
//    'page arguments' => array(2, 3),
//    'access arguments' => array('administer site configuration'),
//    'file' => 'lambeth_opendata.inc',
//    'weight' => 300,
//  );
  return $items;
}

/**
 * Access callback for the entity API.
 *
 * @param string $op
 *   Operation type
 * @param string $type
 *   Type
 * @param string $account
 *   Account
 */
function lambeth_opendata_access($op, $type = NULL, $account = NULL) {
  return user_access('administer site configuration', $account);
}

/**
 * Implements hook_search_api_service_info().
 */
function lambeth_opendata_search_api_service_info() {
  $services['lambeth_opendata_solr_service'] = array(
    'name' => t('Lambeth Open Data Solr Service'),
    'description' => t('Extends Search API Solr service class for Lambeth Open Data indexes'),
    'class' => 'LambethOpendDataSolrService',
  );
  return $services;
}

/**
 * Implements hook_views_api().
 */
//function lambeth_opendata_views_api() {
//  return array(
//    'api' => '3.0',
//    'path' => drupal_get_path('module', 'lambeth_opendata') . '/views',
//  );
//}

/**
 * Return the help text for this module
 *
 * @param string $path
 *   Path
 * @param string $arg
 *   Argument
 */
function lambeth_opendata_help($path, $arg) {
  switch ($path) {
    case 'admin/help#lambeth_opendata':
      $file = drupal_get_path('module', 'lambeth_opendata') . '/README.txt';
      $output = file_get_contents($file);
      return '<pre>' . check_plain($output) . '</pre>';
  }
}

/**
 * Return descriptive text for this module
 */
function lambeth_opendata_description() {
  return array(
    '#markup' => t(
        '<h2>Lambeth Open Data</h2>
      <p>Classes, methods and callbacks related to Lambeth Open Data entities</p>'
    ),
  );
}

/**
 * Implements hook_entity_info().
 */
function lambeth_opendata_entity_info() {
  $return = array(
    'lambeth_opendata_foi' => array(
      'label' => t('Lambeth Open Data FoI Entity'),
      'entity class' => 'LBLODFoIClass',
      'controller class' => 'LBLODFoIController',
      'creation callback' => 'lambeth_opendata_foi_creation_callback',
      'access callback' => 'lambeth_opendata_access',
//    'view callback' => 'lambeth_opendata_view_callback',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'entity keys' => array(
        'id' => 'Ref',
      ),
      'static cache' => TRUE,
      'field cache' => FALSE,
      'label callback' => 'lambeth_opendata_foi_label',
      'uri callback' => 'lambeth_opendata_foi_uri',
    ),
    'lambeth_opendata_locations' => array(
      'label' => t('Lambeth Open Data Locations Entity'),
      'entity class' => 'LBLODLocationsClass',
      'controller class' => 'LBLODLocationsController',
      'creation callback' => 'lambeth_opendata_locations_creation_callback',
      'access callback' => 'lambeth_opendata_access',
//    'view callback' => 'lambeth_opendata_view_callback',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'entity keys' => array(
        'id' => 'index',
      ),
      'static cache' => TRUE,
      'field cache' => FALSE,
      'label callback' => 'lambeth_opendata_locations_label',
      'uri callback' => 'lambeth_opendata_locations_uri',
    ),
    'lambeth_opendata_planning' => array(
      'label' => t('Lambeth Open Data Planning Entity'),
      'entity class' => 'LBLODPlanningClass',
      'controller class' => 'LBLODPlanningController',
      'creation callback' => 'lambeth_opendata_planning_creation_callback',
      'access callback' => 'lambeth_opendata_access',
//    'view callback' => 'lambeth_opendata_view_callback',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'entity keys' => array(
        'id' => 'REFVAL',
      ),
      'static cache' => TRUE,
      'field cache' => FALSE,
      'label callback' => 'lambeth_opendata_planning_label',
      'uri callback' => 'lambeth_opendata_planning_uri',
    ),
    'lambeth_opendata_spending' => array(
      'label' => t('Lambeth Open Data Spending Entity'),
      'entity class' => 'LBLODSpendingClass',
      'controller class' => 'LBLODSpendingController',
      'creation callback' => 'lambeth_opendata_spending_creation_callback',
      'access callback' => 'lambeth_opendata_access',
//    'view callback' => 'lambeth_opendata_view_callback',
      'fieldable' => FALSE,
      'exportable' => FALSE,
      'entity keys' => array(
        'id' => 'Index',
      ),
      'static cache' => TRUE,
      'field cache' => FALSE,
      'label callback' => 'lambeth_opendata_spending_label',
      'uri callback' => 'lambeth_opendata_spending_uri',
    ),
  );
  return $return;
}

function lambeth_opendata_get_indexkey($entity_type) {

  switch ($entity_type) {
    case 'lambeth_opendata_foi':
      return 'Ref';
    case 'lambeth_opendata_spending':
      return 'Index';
    case 'lambeth_opendata_planning':
      return 'REFVAL';
    case 'lambeth_opendata_locations':
      return 'index';
    default:
      return 'id';
  }
}

function lambeth_opendata_search_api_item_type_info_alter(&$types) {
  $types['lambeth_opendata_foi']['datasource controller'] = 'LambethOpenDataEntityDataSourceController';
  $types['lambeth_opendata_locations']['datasource controller'] = 'LambethOpenDataEntityDataSourceController';
  $types['lambeth_opendata_planning']['datasource controller'] = 'LambethOpenDataEntityDataSourceController';
  $types['lambeth_opendata_spending']['datasource controller'] = 'LambethOpenDataEntityDataSourceController';
}

/**
 * @param array $call_args
 * @param object $query
 */
function lambeth_opendata_search_api_solr_query_alter(&$call_args, &$query) {
  if ($query->getIndex()->server()->class == 'lambeth_opendata_solr_service') {
    try {
      $call_args['params']['fl'] = 'score *';
      unset($call_args['params']['qf']);
      if (empty($call_args['query'])) {
        $call_args['query'] = '[* TO *]';
      }
      /*
       * see fetchItem()
       * query to get a single record
       * when parse mode is direct, the keys are set
       * therefore ignore filters and facets etc.
       * and don't bother logging the search keys
       */
      if ($query->getOption('parse mode') === 'direct') {
        $call_args['limit'] = 1;
        unset($call_args['params']['fq']);
        unset($call_args['params']['facet']);
        unset($call_args['params']['facet.sort']);
        unset($call_args['params']['facet.limit']);
        unset($call_args['params']['facet.mincount']);
        unset($call_args['params']['facet.missing']);
        unset($call_args['params']['facet.field']);
      }
      // search_api_solr wants the index_id and we don't have one
      if ($pos = preg_grep('/(index_id)/', $call_args['params']['fq'])) {
        unset($call_args['params']['fq'][key($pos)]);
      }
    } catch (Exception $e) {
      watchdog('lambeth_opendata_search_api_solr_query_alter', $e->getMessage());
    }
  }
}

function lambeth_opendata_search_api_solr_field_mapping_alter($index, &$fields) {
  if ($index->server()->class == 'lambeth_opendata_solr_service') {
    $fields['search_api_id'] = 'is_search_api_id';
    $fields['search_api_relevance'] = 'score';

    $key = lambeth_opendata_get_indexkey($index->item_type);
    $fields['search_api_item_id'] = $key;
    $props = entity_get_all_property_info($index->item_type);
    foreach ($props as $k => $v) {
      if (isset($fields[$k])) {
        $fields[$k] = $k;
      }
    }
  }
}

function lambeth_opendata_search_api_solr_search_results_alter(&$results, &$query, &$response) {
//if ($query->getIndex()->server()->class == 'lambeth_opendata_solr_service') {
//  if ($query->getIndex()->item_type=='lambeth_opendata_foi') {
//    foreach ($results['results'] as $id => $item) {
//    }
//  }
//}
}

/**
 * A search index was edited in any way.
 *
 * @param SearchApiIndex $index
 *   The edited index.
 */
function lambeth_opendata_search_api_index_update(SearchApiIndex $index) {
  switch ($index->machine_name) {
    case 'lbl_foi_index':
    case 'lbl_locations_index':
    case 'lbl_planning_index':
    case 'lbl_spending_index':
      break;
  }
}

/**
 * Implements hook_entity_insert().
 *
 * Marks the new item as to-index for all indexes on entities of the specified
 * type.
 *
 * @param $entity
 *   The new entity.
 * @param $type
 *   The entity's type.
 */
function lambeth_opendata_entity_insert($entity, $type) {
  if ($type = lambeth_opendata_trackable_entity($entity, $type)) {
    list($id) = entity_extract_ids('node', $entity);
    if (isset($id)) {
      search_api_track_item_insert($type, array($id));
    }
  }
}

/**
 * Implements hook_entity_update().
 *
 * Marks the item as changed for all indexes on entities of the specified type.
 *
 * @param $entity
 *   The updated entity.
 * @param $type
 *   The entity's type.
 */
function lambeth_opendata_entity_update($entity, $type) {
  if ($type = lambeth_opendata_trackable_entity($entity, $type)) {
    list($id) = entity_extract_ids('node', $entity);
    if (isset($id)) {
      search_api_track_item_change($type, array($id));
    }
  }
}

/**
 * Implements hook_entity_delete().
 *
 * Removes the item from the tracking table and deletes it from all indexes.
 *
 * @param $entity
 *   The updated entity.
 * @param $type
 *   The entity's type.
 */
function lambeth_opendata_entity_delete($entity, $type) {
  if ($type = lambeth_opendata_trackable_entity($entity, $type)) {
    list($id) = entity_extract_ids('node', $entity);
    if (isset($id)) {
      search_api_track_item_delete($type, array($id));
    }
  }
}

function lambeth_opendata_trackable_entity($entity, $type) {
  global $_lambeth_opendata_types;
  if ($type == 'node') {
    if ($entity->type == 'lambeth_opendata_document') {
      $doctype = lambeth_opendata_get_node_type_by_tid($entity->field_lambeth_doc_type[LANGUAGE_NONE][0]['tid']);
      if (array_key_exists($doctype, $_lambeth_opendata_types)) {
        return 'lambeth_opendata_' . $doctype;
      }
    }
  }
  return FALSE;
}

/**
 * Autocomplete callback function.
 */
function lambeth_opendata_autocomplete($type, $field, $string = NULL) {

  switch ($type) {
    case 'locations':
      if ($field == 'type') {

      }
      //$results = array_combine(array_values($values), array_values($values));
      break;

    default:
      $results = array();
      break;
  }
  drupal_json_output($results);
}

function lambeth_opendata_form_views_exposed_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-lambeth-open-data-locations-page') {
    //$form['type']['#autocomplete_path'] = 'lambeth_opendata/autocomplete/locations/type';
    $form['type']['#type'] = 'select';
    unset($form['type']['#size']);
    $types = array(
      'AdventurePlaygrounds',
      'CarParks',
      'ChildrensCentres',
      'CommunityToilets',
      'CoreOfficeBuildings',
      'FoodGrowingProjects',
      'LeisureCentres',
      'Libraries',
      'ParkingCCTVCameras',
      'PoliceStations',
      'PollingStations',
      'PublicConveniences',
      'RecyclingBanks',
      'Schools',
    );
    sort($types);
    $options = array_combine(array_values($types), array_values($types));
    $form['type']['#options'] = $options;
    return;
  }
  elseif ($form['#id'] == 'views-exposed-form-lambeth-open-data-spending-page') {
    //$form['month']['#autocomplete_path'] = 'lambeth_opendata/autocomplete/spending/month';
    $form['Year']['#type'] = 'select';
    unset($form['Year']['#size']);
    $years = array(
      '',
      '2011',
      '2012',
    );
    $form['Year']['#options'] = array_combine(array_values($years), array_values($years));

    $form['Month']['#type'] = 'select';
    unset($form['Month']['#size']);
    $months = array('', 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
      'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec');
    $form['Month']['#options'] = array_combine(array_values($months), array_values($months));
    return;
  }
  return;
}

function lambeth_opendata_get_type_from_index_name($machine_name) {
  return str_replace('_index', '', str_replace('lbl_', '', $machine_name));
}

function lambeth_opendata_get_node_type_by_tid($tid) {
  global $_lambeth_opendata_types;
  foreach ($_lambeth_opendata_types as $type => $info) {
    if ($info['tid'] == $tid) {
      return $type;
    }
  }
  return FALSE;
}

function lambeth_opendata_get_node_tid_by_type($type) {
  global $_lambeth_opendata_types;
  return isset($_lambeth_opendata_types[$type]) ? $_lambeth_opendata_types[$type]['tid'] : FALSE;
}

/**
 * This hook is called right after the execute process. The query has
 * been executed, but the pre_render() phase has not yet happened for
 * handlers.
 *
 * Adding output to the view can be accomplished by placing text on
 * $view->attachment_before and $view->attachment_after. Altering the
 * content can be achieved by editing the items of $view->result.
 * @param $view
 *   The view object about to be processed.
 */
function lambeth_opendata_views_post_execute(&$view) {
//  if ($view->name == 'lambeth_opendata_documents') {
//    $view->field['nothing']->table = 'search_api_item';
//    $view->field['nothing']->real_field = 'changed';
//    return;
//  }
  return;
}

/**
 * This hook is called right before the render process. The query has been
 * executed, and the pre_render() phase has already happened for handlers, so
 * all data should be available.
 *
 * Adding output to the view can be accomplished by placing text on
 * $view->attachment_before and $view->attachment_after. Altering the content
 * can be achieved by editing the items of $view->result.
 *
 * This hook can be utilized by themes.
 * @param $view
 *   The view object about to be processed.
 */
function lambeth_opendata_views_pre_render(&$view) {
//  if ($view->name == 'lambeth_opendata_documents') {
//    foreach ($view->result as $row) {
//      continue;
//    }
//  }
}

/**
 * Alter the query before executing the query.
 *
 * This hook should be placed in MODULENAME.views.inc and it will be
 * auto-loaded. MODULENAME.views.inc must be in the directory specified by the
 * 'path' key returned by MODULENAME_views_api(), or the same directory as the
 * .module file, if 'path' is unspecified.
 *
 * @param $view
 *   The view object about to be processed.
 * @param $query
 *   An object describing the query.
 * @see hook_views_query_substitutions()
 */
function lambeth_opendata_views_query_alter(&$view, &$query) {

  if ($view->name == 'lambeth_opendata_documents') {

//    $join = new views_join;
//    $join->construct('search_api_item', 'node', 'nid', 'item_id');
//    $query->add_relationship('search_api_item', $join, 'node');
//    $query->add_field('search_api_item', 'changed');
//
//    $view->display['default']->display_options['fields']['status']['id'] = 'status';
//    $view->display['default']->display_options['fields']['status']['table'] = 'search_api_item';
//    $view->display['default']->display_options['fields']['status']['field'] = 'changed';
//    $view->display['default']->display_options['fields']['status']['label'] = 'Status';
    //$view->add_item($view->display['page']->id, 'field', 'search_api_item', 'changed'); //, $options = array(), $id = NULL)
  }
  return;
}

/**
 * Implements hook_block_info().
 */
function lambeth_opendata_block_info() {
  $blocks['lambeth_opendata_documents'] = array(
    'info' => t('Lambeth Open Data Documents'),
  );
//  $blocks['lambeth_opendata_documents_istat'] = array(
//    'info' => t('Lambeth Open Data Documents Index Status'),
//  );
  $blocks['lambeth_opendata_documents_form'] = array(
    'info' => t('Lambeth Open Data Documents Exposed Form'),
  );
  $indexes = lambeth_openadata_documents_get_indexes();
  foreach ($indexes as $idx) {
    $blocks['lambeth_' . $idx] = array(
      'info' => t('Lambeth Open Data Index Status: ' . $idx),
    );
  }
  return $blocks;
}

/**
 * Implementation of hook_block_configure().
 */
function lambeth_opendata_block_configure($delta = '') {
  switch ($delta) {
    case 'lambeth_opendata_documents':
      $form = array();
      $form_state['input'] = lambeth_opendata_get_documents_block_defaults($delta);
      return lambeth_opendata_documents_exposed_form($form, $form_state, $delta, TRUE);
//    case 'lambeth_opendata_documents_istat':
//      return $form;
  }
  return array();
}

function lambeth_opendata_get_documents_block_defaults($delta = '') {
  $defaults = array(
    $delta . '_type' => 0,
    $delta . '_limit' => 25,
    $delta . '_status' => -2,
  );
  return variable_get('lambeth_opendata_blocks', $defaults);
}

/**
 * Save the configuration options from hook_block_configure().
 *
 * This hook allows you to save the block-specific configuration settings
 * defined within your hook_block_configure().
 *
 * @param $delta
 *   Which block is being configured. This is a unique identifier for the block
 *   within the module, defined in hook_block_info().
 * @param $edit
 *   The submitted form data from the configuration form.
 *
 * For a detailed usage example, see block_example.module.
 *
 * @see hook_block_configure()
 * @see hook_block_info()
 */
function lambeth_opendata_block_save($delta = '', $edit = array()) {
  if ($delta == 'lambeth_opendata_documents') {
    $defaults = lambeth_opendata_get_documents_block_defaults($delta);
    $defaults[$delta . '_type'] = $edit[$delta . '_type'];
    $defaults[$delta . '_limit'] = empty($edit[$delta . '_limit']) ? $defaults[$delta . '_limit'] : $edit[$delta . '_limit'];
    $defaults[$delta . '_status'] = $edit[$delta . '_status'];
    variable_set('lambeth_opendata_blocks', $defaults);
  }
}

/**
 * Implements hook_block_view().
 */
function lambeth_opendata_block_view($delta = '') {
  switch ($delta) {
    case 'lambeth_opendata_documents':
      $defaults = lambeth_opendata_get_documents_block_defaults($delta);
      $type = isset($_GET[$delta . '_type']) ? $_GET[$delta . '_type'] : $defaults[$delta . '_type'];
      $limit = isset($_GET[$delta . '_limit']) ? $_GET[$delta . '_limit'] : $defaults[$delta . '_limit'];
      $status = isset($_GET[$delta . '_status']) ? $_GET[$delta . '_status'] : $defaults[$delta . '_status'];
      $rows = lambeth_opendata_documents_query($limit, $type, $status);
      $variables = array(
        'data' => $rows,
        'class' => 'lambeth_opendata_documents_block',
      );
      $block['content'] = theme('lambeth_opendata_documents_table', $variables);
      break;
//    case 'lambeth_opendata_documents_istat':
//      $indexes = lambeth_openadata_documents_index_check();
//      $variables = array(
//        'indexes' => $indexes,
//        'class' => 'lambeth_opendata_documents_istat',
//      );
//      $block['content'] = theme('lambeth_opendata_documents_istat', $variables);
//      break;
    case 'lambeth_opendata_documents_form':
      $block['content'] = drupal_get_form('lambeth_opendata_documents_exposed_form');
    default:
      if ($i = preg_match('/lambeth_(lbl_(.*)_index)/', $delta, $matches)) {
        $indexes = lambeth_openadata_documents_index_check($matches[1]);
        $variables = array(
          'indexes' => $indexes,
          'class' => 'lambeth_opendata_documents_istat',
        );
        $block['content'] = theme('lambeth_opendata_documents_istat', $variables);
      }
      break;
  }
  return $block;
}

/**
 * @param type $form
 * @param type $form_state
 * @param type $delta
 * @param type $admin
 * @return string
 */
function lambeth_opendata_documents_exposed_form($form, &$form_state = array(), $delta = '', $admin = FALSE) {
  $delta = $delta ? $delta : 'lambeth_opendata_documents';
  $defaults = lambeth_opendata_get_documents_block_defaults($delta);
  if (!$admin) {
    $form = array(
      '#title' => '',
      '#prefix' => '<div class="container-inline">',
      '#suffix' => '</div>',
      '#tree' => TRUE,
    );
    $type = isset($_GET[$delta . '_type']) ? $_GET[$delta . '_type'] : $defaults[$delta . '_type'];
    $limit = isset($_GET[$delta . '_limit']) ? $_GET[$delta . '_limit'] : $defaults[$delta . '_limit'];
    $status = isset($_GET[$delta . '_status']) ? $_GET[$delta . '_status'] : $defaults[$delta . '_status'];
  }
  else {
    $type = isset($form_state['input'][$delta . '_type']) ? $form_state['input'][$delta . '_type'] : $defaults[$delta . '_type'];
    $limit = isset($form_state['input'][$delta . '_type']) ? $form_state['input'][$delta . '_limit'] : $defaults[$delta . '_limit'];
    $status = isset($form_state['input'][$delta . '_type']) ? $form_state['input'][$delta . '_status'] : $defaults[$delta . '_status'];
  }
  $form[$delta . '_type'] = array(
    '#type' => 'select',
    '#title' => t('Type'),
    '#default_value' => $type,
    '#options' => lambeth_opendata_get_type_options(),
  );
  $form[$delta . '_limit'] = array(
    '#type' => 'textfield',
    '#title' => t('Limit'),
    '#default_value' => $limit,
    '#size' => 2,
  );
  $form[$delta . '_status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => $status,
    '#options' => array(
      -2 => 'all',
      -1 => 'error',
      0 => 'indexed',
      1 => 'queued',
    ),
  );
  if (!$admin) {
    $form['submit'] = array(
      '#name' => 'submit',
      '#type' => 'submit',
      '#value' => 'Apply',
      '#submit' => array('lambeth_opendata_documents_exposed_form_submit'),
    );
  }
  return $form;
}

function lambeth_opendata_documents_exposed_form_submit(&$form, &$form_state) {
  $delta = 'lambeth_opendata_documents';
  $form_state['redirect'] = array(
    '/lambeth-open-data-documents',
    array('query' => array(
        $delta . '_type' => $form_state['values'][$delta . '_type'],
        $delta . '_limit' => $form_state['values'][$delta . '_limit'],
        $delta . '_status' => $form_state['values'][$delta . '_status'],
      ),
    ),
    302,
  );
  return;
}

/**
  SELECT n.nid, n.title, n.changed, t.name, s.changed,
  IF(s.changed>0,'queued',IF(s.changed<0,'error','indexed'))
  FROM node n
  LEFT JOIN search_api_item s ON s.item_id = n.nid
  LEFT JOIN field_data_field_lambeth_doc_type f ON f.entity_id = n.nid
  LEFT JOIN taxonomy_term_data t ON t.tid = f.field_lambeth_doc_type_tid
  WHERE n.type='lambeth_opendata_document'
  ORDER BY n.changed DESC
 *
 * @return array
 */
function lambeth_opendata_documents_query($limit = 0, $type = 0, $status = -2) {
  $query = db_select('node', 'n');
  $query->addField('n', 'nid');
  $query->addField('n', 'title', 'node_title');
  $query->addField('n', 'changed', 'node_changed');
  $query->addField('t', 'name', 'term_name');
  $query->addField('s', 'changed', 'search_changed');
  $query->leftJoin('search_api_item', 's', 's.item_id=n.nid');
  $query->leftJoin('search_api_index', 'i', 'i.id=s.index_id');
  $query->leftJoin('field_data_field_lambeth_doc_type', 'f', 'f.entity_id=n.nid');
  $query->leftJoin('taxonomy_term_data', 't', 't.tid=f.field_lambeth_doc_type_tid');
  $query->condition('n.type', 'lambeth_opendata_document', '=');
  $query->condition('i.machine_name', 'lbl_document_index', '=');
  $query->orderBy('n.changed', 'DESC');
  $query->orderBy('s.changed', 'ASC');
  if ($limit) {
    $query->range(0, $limit);
  }
  if ($type) {
    $query->condition('f.field_lambeth_doc_type_tid', $type, '=');
  }
  if ($status > -2) {
    $query->condition('s.changed', $status, '=');
  }
  $res = $query->execute();
  $result = $res->fetchAll();
  return $result;
}

function lambeth_openadata_documents_index_check($index='') {
  $query = db_select('search_api_index', 'i');
  $query->addField('i', 'name');
  $query->addField('i', 'enabled');
  $query->condition('i.module', 'lambeth_opendata_solr', '=');
  $query->condition('i.item_type', 'node', '!=');
  if ($index) {
    $query->condition('i.machine_name', $index, '=');
  }
  $res = $query->execute();
  $result = $res->fetchAll();
  return $result;
}

function lambeth_openadata_documents_get_indexes() {
  $query = db_select('search_api_index', 'i');
  $query->addField('i', 'machine_name');
  $query->condition('i.module', 'lambeth_opendata_solr', '=');
  $query->condition('i.item_type', 'node', '!=');
  $res = $query->execute();
  $result = $res->fetchCol();
  return $result;
}

/**
 * Implements hook_theme().
 */
function lambeth_opendata_theme() {
  return array(
    'lambeth_opendata_documents_table' => array(
      'render element' => 'element',
      'template' => 'lambeth_opendata_documents_table',
    ),
    'lambeth_opendata_documents_istat' => array(
      'render element' => 'element',
      'template' => 'lambeth_opendata_documents_istat',
    ),
    'lambeth_opendata_documents_exposed_form' => array(
      'render element' => 'form',
      'template' => 'lambeth_opendata_documents_exposed_form',
    ),
  );
}

/**
 * Implements template_preprocess() to add information to the
 * theming_example_text_form().
 *
 * In this example the form is preprocessed here and $text_form
 * ($variables['text_form]) is ready to be output as prepared here when we get
 * to theming_example_text_form.tpl.php. However, other variables are provided
 * for use there; every key of the $variables array will be available as a
 * variable in the template.
 */
function template_preprocess_lambeth_opendata_documents_table(&$variables) {
  $variables['header'] = array('Document Title', 'Last Updated', 'Type', 'Status');
  return;
}

function template_preprocess_lambeth_opendata_documents_exposed_form(&$variables) {
  $variables['filters'] = array();
  $hidden = array();
  foreach (element_children($variables['form']) as $key) {
    $type = $variables['form'][$key]['#type'];
    if ($type == 'hidden' || $type == 'token') {
      $hidden[] = drupal_render($variables['form'][$key]);
    }
    else {
      $variables['filters_form'][$key] = drupal_render($variables['form'][$key]);
    }
  }
  $variables['filters_form']['hidden'] = implode($hidden);
  $variables['filters'] = implode($variables['filters_form']);
}

/**
 * implements hook_taxonomy_term_update
 */
function lambeth_opendata_taxonomy_term_update($term) {
  lambeth_opendata_taxonomy_term_changed($term);
}

/**
 * implements hook_taxonomy_term_insert
 */
function lambeth_opendata_taxonomy_term_insert($term) {
  lambeth_opendata_taxonomy_term_changed($term);
}

/**
 * implements hook_taxonomy_term_delete
 */
function lambeth_opendata_taxonomy_term_delete($term) {
  lambeth_opendata_taxonomy_term_changed($term);
}

function lambeth_opendata_taxonomy_term_changed($term) {
  if ($term->vocabulary_machine_name == 'lambeth_opendata_category') {
    lambeth_opendata_cache_document_types();
  }
}